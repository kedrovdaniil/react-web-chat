[{"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\rooms\\addRoom\\AddRoom.jsx":"1","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\api\\api.js":"2","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\rooms\\addRoom\\selectableUser\\SelectableUser.jsx":"3","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\Messenger.jsx":"4","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\chat\\addMessage\\AddMessage.jsx":"5","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\chat\\message\\Message.jsx":"6","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\chat\\ChatC.jsx":"7","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\rooms\\Rooms.jsx":"8","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\chat\\Chat.jsx":"9","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\rooms\\room\\Room.jsx":"10","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\chat\\deleteButton\\DeleteButton.jsx":"11","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\modal\\Modal.jsx":"12","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\chat\\editButton\\EditButton.jsx":"13","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\chat\\editButton\\member\\Member.jsx":"14","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\icons\\PlusSVG.jsx":"15","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\websocket\\WebSocketHOC.jsx":"16","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\index.js":"17","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\main\\Main.jsx":"18","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\auth\\AuthHOC.jsx":"19","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\utils\\useLocalStorage.js":"20","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\main\\registration\\RegistrationForm.jsx":"21","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\contexts\\ChatsProvider.jsx":"22"},{"size":3679,"mtime":1617195908712,"results":"23","hashOfConfig":"24"},{"size":3167,"mtime":1617217484534,"results":"25","hashOfConfig":"24"},{"size":750,"mtime":1617171648497,"results":"26","hashOfConfig":"24"},{"size":1935,"mtime":1617006613676,"results":"27","hashOfConfig":"24"},{"size":1733,"mtime":1617352168583,"results":"28","hashOfConfig":"24"},{"size":555,"mtime":1617215519076,"results":"29","hashOfConfig":"24"},{"size":2942,"mtime":1617352008459,"results":"30","hashOfConfig":"24"},{"size":2226,"mtime":1617351656271,"results":"31","hashOfConfig":"24"},{"size":3281,"mtime":1617215906771,"results":"32","hashOfConfig":"24"},{"size":1898,"mtime":1617218185961,"results":"33","hashOfConfig":"24"},{"size":2206,"mtime":1617184238063,"results":"34","hashOfConfig":"24"},{"size":1682,"mtime":1617195987081,"results":"35","hashOfConfig":"24"},{"size":8430,"mtime":1617262115055,"results":"36","hashOfConfig":"24"},{"size":1398,"mtime":1617218914052,"results":"37","hashOfConfig":"24"},{"size":555,"mtime":1617173717541,"results":"38","hashOfConfig":"24"},{"size":2421,"mtime":1617195923881,"results":"39","hashOfConfig":"24"},{"size":500,"mtime":1609963473526,"results":"40","hashOfConfig":"24"},{"size":3159,"mtime":1612105195247,"results":"41","hashOfConfig":"24"},{"size":1955,"mtime":1616780093755,"results":"42","hashOfConfig":"24"},{"size":1513,"mtime":1612121665253,"results":"43","hashOfConfig":"24"},{"size":1131,"mtime":1609686582730,"results":"44","hashOfConfig":"24"},{"size":7840,"mtime":1617352308784,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"wyfk6u",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"75"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\rooms\\addRoom\\AddRoom.jsx",["98","99","100"],"import { useEffect, useState } from 'react';\r\nimport { ChatsAPI, usersAPI } from '../../../../api/api';\r\nimport PlusSVG from '../../../icons/PlusSVG';\r\nimport Loader from '../../../loader/Loader';\r\nimport s from './AddRoom.module.scss';\r\nimport SelectableUser from './selectableUser/SelectableUser';\r\n\r\nconst AddRoom = ({ openCloseForm }) => {\r\n\r\n    // state\r\n    const [chatName, setChatName] = useState(\"\")\r\n    const [chatSearch, setChatSearch] = useState(\"\")\r\n    const [searchResults, setSearchResults] = useState([])\r\n    const [isSearchLoading, setIsSearchLoading] = useState(false)\r\n    const [selectedUsers, setSelectedUsers] = useState([])\r\n\r\n    // init\r\n    useEffect(() => {\r\n        setIsSearchLoading(true)\r\n        const init = async () => {\r\n            const r = await usersAPI.findUsers(\"\")\r\n            setSearchResults(r)\r\n            setIsSearchLoading(false)\r\n        }\r\n        init()\r\n    }, []);\r\n\r\n    // search\r\n    const onChangeSearch = async (e) => {\r\n        // set input value\r\n        setChatSearch(e.target.value)\r\n        setIsSearchLoading(true)\r\n\r\n        // get search results\r\n        const results = await usersAPI.findUsers(e.target.value)\r\n\r\n        // set result\r\n        setSearchResults(results)\r\n        setIsSearchLoading(false)\r\n    }\r\n\r\n    // select handler\r\n    const onSelectHandler = (e) => {\r\n        const isAlreadySelected = selectedUsers.find(u => u.id === Number(e.target.value))\r\n        if (isAlreadySelected) {\r\n            setSelectedUsers(selectedUsers => [...selectedUsers.filter(u => u.id !== Number(e.target.value))])\r\n        } else {\r\n            setSelectedUsers(selectedUsers => [...selectedUsers, searchResults.find(u => u.id === Number(e.target.value))])\r\n        }\r\n    }\r\n\r\n    // submit handler\r\n    const submitHandler = async (e) => {\r\n        e.preventDefault()\r\n        const r = await ChatsAPI.create(chatName, selectedUsers)\r\n        if (r.result = true) {\r\n            window.location.reload();\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    // selected user\r\n    const isSelected = (userId) => selectedUsers.find(u => u?.id === userId) ? true : false\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.close} onClick={openCloseForm}>\r\n                <PlusSVG />\r\n            </div>\r\n            <form onSubmit={submitHandler}>\r\n                <input name=\"name\" type=\"search\" value={chatName} onChange={(e) => setChatName(e.target.value)} className={s.input} placeholder={\"Enter the chat name\"} />\r\n                <input name=\"search\" type=\"search\" value={chatSearch} onChange={onChangeSearch} className={s.input} placeholder={\"Search users for add\"} />\r\n                <div>\r\n                    <span className={s.count}>Selected users count: {selectedUsers.length}</span>\r\n                </div>\r\n                <hr />\r\n                {!isSearchLoading ?\r\n                    <div className={s.users}>\r\n                        {searchResults.map(user => <SelectableUser\r\n                            id={user.id}\r\n                            name={user.name}\r\n                            avatarUrl={user.avatar_url}\r\n                            email={user.email}\r\n                            onSelect={onSelectHandler}\r\n                            isSelected={isSelected(user.id)}\r\n                            key={user.id}\r\n                        />)}</div> :\r\n                    <div className={s.loader}><img src={'/loader.gif'} /></div>\r\n                }\r\n                <button type=\"submit\" className={s.button} disabled={!selectedUsers.length}>Create chat</button>\r\n            </form>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default AddRoom;\r\n","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\api\\api.js",[],"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\rooms\\addRoom\\selectableUser\\SelectableUser.jsx",[],"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\Messenger.jsx",["101","102","103","104","105"],"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\chat\\addMessage\\AddMessage.jsx",[],"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\chat\\message\\Message.jsx",[],"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\chat\\ChatC.jsx",["106","107","108","109","110","111","112","113"],"import React from 'react';\r\nimport { useContext, useState, useEffect, memo, useCallback } from 'react';\r\nimport { StoreContext } from '../../../contexts/StoreProvider';\r\nimport Echo from 'laravel-echo';\r\nimport { ChatsAPI } from '../../../api/api';\r\nimport Chat from './Chat';\r\nimport { ChatsContext } from '../../../contexts/ChatsProvider';\r\nimport DateTime from 'luxon/src/datetime.js'\r\n\r\nconst ChatC = () => {\r\n\r\n    // context\r\n    const { state } = useContext(StoreContext)\r\n    const { chatsState, setNewMessage, onScrollToTop } = useContext(ChatsContext)\r\n\r\n    // chat id\r\n    const chatId = chatsState.activeChatId\r\n\r\n    // chat messages\r\n    const messages = chatsState.rooms.find(room => room.id === chatId)?.messages?.data ?? []\r\n\r\n    // add new message\r\n    const addNewMessage = (message) => {\r\n\r\n        // console.log('message', message)\r\n\r\n        const newMessage = {\r\n            id: Date.now(),\r\n            chat_id: chatId,\r\n            user_id: state.user_id,\r\n            content: message,\r\n            created_at: DateTime.local().toISO(),\r\n            updated_at: DateTime.local().toISO(),\r\n        }\r\n\r\n        setNewMessage(newMessage, chatId, true)\r\n    }\r\n\r\n    // chat name\r\n    const room = chatsState.rooms.find(r => r.id === chatId)\r\n    const roomName = room.name\r\n    const chatName = roomName ? roomName : room.countOfMembers === 2 ? `Чат с ${room.members.filter(m => m.id != state.user_id)[0].name}` : \"Чат без названия\"\r\n\r\n    // is public\r\n    const isPublic = room.countOfMembers > 2\r\n\r\n    // is loading\r\n    // console.log('isLoadingActive room.messages', room.messages)\r\n    const isLoadingActive = room.messages.isLoaderActive\r\n\r\n    // is typing\r\n    const isTyping = room.messages.isTyping\r\n    const typingUsers = room.messages.typingUsers\r\n\r\n    // members\r\n    const members = room.members\r\n\r\n    // isAdmin & isManager\r\n    const isAdmin = room.managed_by_user_id === state.user_id\r\n    const isManager = room.created_by_user_id === state.user_id\r\n\r\n    // admin user\r\n    const adminUser = members.find(m => m.id === room.created_by_user_id)\r\n    const managerUser = members.find(m => m.id === room.managed_by_user_id)\r\n\r\n    return (\r\n        <>\r\n            <Chat\r\n                isAdmin={isAdmin}\r\n                isManager={isManager}\r\n                isManager={isManager}\r\n                isPublic={isPublic}\r\n                chatName={chatName}\r\n                messages={messages}\r\n                isLoadingActive={isLoadingActive}\r\n                chatId={chatId}\r\n                addNewMessage={addNewMessage}\r\n                userId={state.user_id}\r\n                onScrollToTop={onScrollToTop}\r\n                isTyping={isTyping}\r\n                typingUsers={typingUsers}\r\n                members={members}\r\n                adminUser={adminUser}\r\n                managerUser={managerUser}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ChatC;\r\n","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\rooms\\Rooms.jsx",["114","115"],"import React, { useState } from 'react';\r\nimport s from './Rooms.module.scss'\r\nimport Room from './room/Room';\r\nimport { ChatsContext } from '../../../contexts/ChatsProvider';\r\nimport { useContext } from 'react';\r\nimport { StoreContext } from '../../../contexts/StoreProvider';\r\nimport AddRoom from './addRoom/AddRoom';\r\nimport PlusSVG from '../../icons/PlusSVG';\r\nimport Loader from '../../loader/Loader';\r\n\r\nconst Rooms = ({ activeRoom, rooms, setActiveRoom }) => {\r\n\r\n    // context\r\n    const { state } = useContext(StoreContext)\r\n    const { chatsState } = useContext(ChatsContext)\r\n\r\n    // state\r\n    const [isAddFormOpen, setIsAddFormOpen] = useState(false)\r\n\r\n    // open & close an add from\r\n    const openCloseForm = () => setIsAddFormOpen(!isAddFormOpen)\r\n\r\n    // messages\r\n    const messages = (roomId) => chatsState.rooms.find(r => r.id === roomId).messages\r\n    // console.log('messages', messages(1))\r\n\r\n    // is typing\r\n    const isTyping = (roomId) => messages(roomId).isTyping\r\n\r\n    // last message\r\n    const lastMessage = (roomId) => messages(roomId).data.length > 0 ? messages(roomId).data[0].content : null\r\n\r\n    return (\r\n        <div className={s.rooms}>\r\n            {!isAddFormOpen ? <div className={s.addRoom} onClick={openCloseForm}>\r\n                <PlusSVG />\r\n                <span>Add a new one</span>\r\n            </div>\r\n                : <AddRoom openCloseForm={openCloseForm} />}\r\n            <div>\r\n                {chatsState.isSet ? chatsState.rooms.map(room => (\r\n                    <Room\r\n                        roomId={room.id}\r\n                        activeRoom={activeRoom}\r\n                        avatarUrl={room.avatar_url}\r\n                        name={room.name}\r\n                        members={room.members}\r\n                        setAsActiveRoom={setActiveRoom}\r\n                        myId={chatsState.user_id}\r\n                        key={room.id}\r\n                        userId={state.user_id}\r\n                        isTyping={isTyping(room.id)}\r\n                        lastMessage={lastMessage(room.id)}\r\n                    />\r\n                )) : <img src='/loader.gif' />}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Rooms;\r\n","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\chat\\Chat.jsx",["116","117","118","119","120","121","122","123","124","125"],"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\rooms\\room\\Room.jsx",["126","127","128","129","130","131","132","133","134","135"],"import React, { useContext } from 'react';\r\nimport s from './Room.module.scss'\r\nimport { StoreContext } from '../../../../contexts/StoreProvider';\r\n\r\nconst Room = ({ avatarUrl, name, setAsActiveRoom, roomId, activeRoom, members, myId, userId, isTyping, lastMessage }) => {\r\n\r\n    const isPublicChat = members.length !== 2 ? true : false\r\n\r\n    const getAvatar = () => {\r\n        if (isPublicChat) {\r\n            return avatarUrl ? avatarUrl : \"\"\r\n        } else {\r\n            const anotherMan = members.filter(m => m.id != userId)[0]\r\n            return anotherMan.avatar_url\r\n        }\r\n    }\r\n\r\n    const getRoomName = () => {\r\n        if (isPublicChat) {\r\n            return name ? name : \"Public chat\"\r\n        } else {\r\n            const anotherMan = members.filter(m => m.id != userId)[0]\r\n            return name ? name : anotherMan.name\r\n        }\r\n    }\r\n\r\n    if (!!isPublicChat) {\r\n        const avatar = avatarUrl ? avatarUrl : \"\"\r\n        const roomName = name ? name : \"Общий чат\"\r\n    } else {\r\n        const anotherMan = members.filter(m => m.id != userId)[0]\r\n        const avatar = anotherMan.avatar_url\r\n        const roomName = anotherMan.name\r\n    }\r\n\r\n    return (\r\n        <div className={Number(activeRoom) === Number(roomId) ? `${s.chat} ${s.chatActive}` : s.chat} onClick={(e) => setAsActiveRoom(Number(e.target.dataset.id))} data-id={roomId}>\r\n            <div className={s.image}>\r\n                <img className={s.avatar} src={getAvatar()} />\r\n            </div>\r\n            <div className={s.info}>\r\n                <span className={s.name}>{getRoomName()}</span>\r\n                <div className={s.additional}>\r\n                    {isTyping ? <img className={s.typing} src=\"/typing.gif\" alt=\"typing\" /> : <span className={s.lastMessage}>{lastMessage}</span>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Room;\r\n","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\chat\\deleteButton\\DeleteButton.jsx",["136","137"],"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\modal\\Modal.jsx",["138","139","140"],"import React, { Children, useContext } from 'react';\r\nimport Portal from './../portal/Portal';\r\nimport s from './Modal.module.scss';\r\nimport { StoreContext } from '../../contexts/StoreProvider';\r\n\r\nconst Modal = ({ type, title, children, modalAllowForClose, onClose }) => {\r\n\r\n    const {state, setState} = useContext(StoreContext)\r\n\r\n    let modalClass\r\n    switch (type) {\r\n        case 'info': {\r\n            modalClass = s.modalWindow\r\n            break\r\n        }\r\n        case 'warn': {\r\n            modalClass = `${s.modalWindow} ${s.warn}`\r\n            break\r\n        }\r\n        case 'error': {\r\n            modalClass = `${s.modalWindow} ${s.error}`\r\n            break\r\n        }\r\n        default:\r\n            modalClass = s.modalWindow\r\n            break\r\n    }\r\n\r\n    const closeHandler = () => {\r\n        // setState({...state, isModalOpen: false})\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Portal>\r\n                <div className={s.overlay}>\r\n                    <div className={modalClass}>\r\n                        <div className={s.head}>\r\n                            <span className={s.title}>{title}</span>\r\n                            <div className={!modalAllowForClose ? s.disabled : s.close } onClick={modalAllowForClose ? closeHandler : null}>\r\n                                <span >&#10006;</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className={s.messageWrapper}>\r\n                            {children}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Portal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Modal;\r\n",["141","142"],"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\chat\\editButton\\EditButton.jsx",["143","144","145","146","147"],"import { useContext, useEffect, useState } from 'react';\r\nimport { ChatsAPI, usersAPI } from '../../../../api/api';\r\nimport { StoreContext } from '../../../../contexts/StoreProvider';\r\nimport PlusSVG from '../../../icons/PlusSVG';\r\nimport Modal from '../../../modal/Modal';\r\nimport SelectableUser from '../../rooms/addRoom/selectableUser/SelectableUser';\r\nimport s from './EditButton.module.scss';\r\nimport Member from './member/Member';\r\n\r\n\r\nconst AddMemberModal = ({\r\n    currentMembers,\r\n    onCancel,\r\n    chatId\r\n}) => {\r\n\r\n    // state\r\n    const [search, setSearch] = useState(\"\")\r\n    const [searchResults, setSearchResults] = useState(currentMembers)\r\n    const [isSearchLoading, setIsSearchLoading] = useState(false)\r\n    const [selectedUsers, setSelectedUsers] = useState([])\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    // selected user\r\n    const isSelected = (userId) => selectedUsers.find(u => u?.id === userId) ? true : false\r\n\r\n    // select handler\r\n    const onSelectHandler = (e) => {\r\n        const isAlreadySelected = selectedUsers.find(u => u.id === Number(e.target.value))\r\n        if (isAlreadySelected) {\r\n            setSelectedUsers(selectedUsers => [...selectedUsers.filter(u => u.id !== Number(e.target.value))])\r\n        } else {\r\n            setSelectedUsers(selectedUsers => [...selectedUsers, searchResults.find(u => u.id === Number(e.target.value))])\r\n        }\r\n    }\r\n\r\n    // filter\r\n    const filterAddedUsers = (user) => {\r\n        let notInclude = true\r\n        for (let i = 0; i < currentMembers.length; i++) {\r\n            if (currentMembers[i].id === user.id) {\r\n                notInclude = false\r\n            }\r\n        }\r\n        return notInclude\r\n    }\r\n\r\n    // search\r\n    const onChangeSearch = async (e) => {\r\n        // set input value\r\n        setSearch(e.target.value)\r\n        setIsSearchLoading(true)\r\n\r\n        // get search results\r\n        const results = await usersAPI.findUsers(e.target.value)\r\n\r\n        // set result\r\n        const filteredResults = results.filter(user => filterAddedUsers(user))\r\n        setSearchResults(filteredResults)\r\n        setIsSearchLoading(false)\r\n    }\r\n\r\n    // init\r\n    useEffect(() => {\r\n        setIsSearchLoading(true)\r\n        const init = async () => {\r\n            const r = await usersAPI.findUsers(\"\")\r\n            const filteredResutls = r.filter(user => filterAddedUsers(user))\r\n            setSearchResults(filteredResutls)\r\n            setIsSearchLoading(false)\r\n        }\r\n        init()\r\n    }, []);\r\n\r\n    // submit\r\n    const onSubmit = async () => {\r\n        setIsLoading(true)\r\n        const results = selectedUsers.map(user => ChatsAPI.addMember(chatId, user.id))\r\n        const r = await Promise.all(results)\r\n        if (r) {\r\n            onCancel()\r\n            setIsLoading(false)\r\n            window.location.reload()\r\n        }\r\n    }\r\n\r\n    return <div className={s.addMemberModal}>\r\n        <input type=\"search\" name=\"search\" value={search} onChange={onChangeSearch} placeholder=\"Search\" className={s.input} />\r\n        {!isSearchLoading ?\r\n            <div className={s.users}>\r\n                {searchResults.map(user => <SelectableUser\r\n                    id={user.id}\r\n                    name={user.name}\r\n                    avatarUrl={user.avatar_url}\r\n                    email={user.email}\r\n                    onSelect={onSelectHandler}\r\n                    isSelected={isSelected(user.id)}\r\n                    key={user.id}\r\n                />)}</div> :\r\n            <div className={s.loader}><img src={'/loader.gif'} /></div>\r\n        }\r\n        <div className={s.buttons}>\r\n            <button onClick={onCancel} className={s.cancel}>Cancel</button>\r\n            <button onClick={onSubmit} className={s.add} disabled={!selectedUsers.length && !isLoading}>Add users</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst EditModal = ({\r\n    isAdmin,\r\n    isManager,\r\n    adminUser,\r\n    managerUser,\r\n    chatName,\r\n    members,\r\n    deleteMember,\r\n    closeModal,\r\n    editChat,\r\n    chatId\r\n}) => {\r\n\r\n    // state\r\n    const [chatNameValue, setChatNameValue] = useState(chatName)\r\n    const [isModalOpen, setIsModalOpen] = useState(false)\r\n\r\n    // modal\r\n    const openAddMemberModal = () => setIsModalOpen(true)\r\n    const closeAddMemberModal = () => setIsModalOpen(false)\r\n\r\n    return <div className={s.modal}>\r\n        <div className={s.name}>\r\n            <hr />\r\n            <h2>Chat name</h2>\r\n            <input type=\"text\" name=\"name\" value={chatNameValue} onChange={(e) => setChatNameValue(e.target.value)} className={s.input} placeholder=\"Enter the chat name\" />\r\n        </div>\r\n        <div className={s.membersWrapper}>\r\n            <hr />\r\n            <h2>Members</h2>\r\n            <div className={s.members}>\r\n            {members.map(user => <Member\r\n                id={user.id}\r\n                imageUrl={user.avatar_url}\r\n                name={user.name}\r\n                email={user.email}\r\n                isDeleteAvailable={isAdmin}\r\n                onDelete={deleteMember}\r\n                isAdmin={isAdmin}\r\n                isManager={isManager}\r\n                adminUser={adminUser}\r\n                managerUser={managerUser}\r\n                key={user.id}\r\n            />)}\r\n            </div>\r\n            <button onClick={openAddMemberModal} className={s.addButton}>\r\n                <PlusSVG />\r\n                Add a new one\r\n            </button>\r\n            {isModalOpen && <Modal title=\"Add a new member\" modalAllowForClose={true} onClose={closeAddMemberModal}>\r\n                <AddMemberModal currentMembers={members} onCancel={closeAddMemberModal} chatId={chatId} />\r\n            </Modal>}\r\n            <hr />\r\n        </div>\r\n        <div className={s.buttons}>\r\n            <button onClick={closeModal} className={s.cancel}>Cancel</button>\r\n            <button onClick={() => editChat(chatNameValue)} className={s.save}>Save</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst EditButton = ({ isAdmin, isManager, chatId, chatName, members, adminUser, managerUser }) => {\r\n\r\n    // context\r\n    // const { state, setState } = useContext(StoreContext)\r\n\r\n    // state\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [membersList, setMembersList] = useState(members)\r\n\r\n    // open modal\r\n    const openModal = () => setIsModalOpen(true)\r\n\r\n    // cancel\r\n    const closeModal = () => setIsModalOpen(false)\r\n\r\n    // edit chat\r\n    const editChat = async (name) => {\r\n        const r = await ChatsAPI.edit(chatId, name)\r\n        if (r.result) {\r\n            closeModal()\r\n            window.location.reload()\r\n        }\r\n    }\r\n\r\n    // delete member handler\r\n    const deleteMember = async (userId) => {\r\n        setMembersList(members => members.filter(m => m.id !== userId))\r\n        const r = await ChatsAPI.removeMember(chatId, userId)\r\n    }\r\n\r\n    // const [isModalOpen, setIsModalOpen] = useState(false)\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <button onClick={openModal} className={s.button}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 348.9 348.9\"><path d=\"M334 11.8l-.4-.4a43.4 43.4 0 00-61.4 2.8l-155.4 170a15 15 0 00-3.2 5.4l-18.2 54.8a20.8 20.8 0 0019.7 27.4c2.9 0 5.7-.6 8.4-1.8l52.9-23.1c1.9-.9 3.6-2.1 5-3.6L336.8 73.2a43.5 43.5 0 00-2.8-61.4zM130.4 234.2l10.7-32 .9-1 20.3 18.5-.9 1-31 13.5zM314.6 53l-132 144.6-20.4-18.5L294.3 34.4a13.4 13.4 0 0119-.9l.5.4c5.4 5 5.8 13.6.8 19z\" /><path d=\"M303.9 138.4a15 15 0 00-15 15v127.3c0 21-17.2 38.2-38.2 38.2H68.9c-21 0-38.1-17.1-38.1-38.2V100.4c0-21 17-38.1 38.1-38.1h131.6a15 15 0 000-30H68.9A68.2 68.2 0 00.8 100.4v180.3A68.2 68.2 0 0068.9 349h181.8a68.2 68.2 0 0068.1-68.2V153.4a15 15 0 00-15-15z\" /></svg>\r\n            </button>\r\n            {isModalOpen && <Modal title=\"Edit chat\" modalAllowForClose={true} type=\"info\" onClose={closeModal}>\r\n                <EditModal\r\n                    chatName={chatName}\r\n                    members={membersList}\r\n                    deleteMember={deleteMember}\r\n                    closeModal={closeModal}\r\n                    editChat={editChat}\r\n                    isAdmin={isAdmin}\r\n                    isManager={isManager}\r\n                    adminUser={adminUser}\r\n                    managerUser={managerUser}\r\n                    chatId={chatId}\r\n                />\r\n            </Modal>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditButton;\r\n","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\account\\chat\\editButton\\member\\Member.jsx",["148"],"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\icons\\PlusSVG.jsx",[],"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\websocket\\WebSocketHOC.jsx",["149","150","151"],"\r\nimport { ChatsContext } from '../../contexts/ChatsProvider';\r\nimport { useContext, useEffect, memo, useCallback } from 'react';\r\nimport Echo from \"laravel-echo\";\r\nimport io from 'socket.io-client'\r\nimport { StoreContext } from '../../contexts/StoreProvider';\r\n\r\nconst WebSocketHOC = memo(({ children }) => {\r\n\r\n\tconst { chatsState, setNewMessage, setTyping } = useContext(ChatsContext)\r\n\tconst { state } = useContext(StoreContext)\r\n\t// console.log('chatsState room 1', chatsState.rooms[0].messages.data)\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\t// connect to broadcast channel\r\n\t\twindow.io = io\r\n\r\n\t\t// connect to socket with auth\r\n\t\twindow.Echo = new Echo({\r\n\t\t\tbroadcaster: 'socket.io',\r\n\t\t\thost: window.location.hostname + ':6001', // this is laravel-echo-server host\r\n\t\t\t// authEndpoint: \"/broadcasting/auth\",\r\n\t\t});\r\n\r\n\t\twindow.Echo.private(`messenger`)\r\n\t\t// window.Echo.channel(`messenger`)\r\n\t\t// window.Echo.join(`messenger`)\r\n\t\t\t// .here(users => console.log('ECHO | users', users))\r\n\t\t\t// .joining(user => console.log('ECHO | joining user', user))\r\n\t\t\t// .leaving(user => console.log('ECHO | leaving user', user))\r\n\t\t\t.listen('.NewMessage', (e) => {\r\n\t\t\t\t// console.log('WebSocketHOC.jsx | event', e)\r\n\t\t\t\t// console.log('WebSocketHOC.jsx | NewMessage', e.message)\r\n\t\t\t\t// console.log('WebSocketHOC.jsx | Message Example', chatsState.rooms.find(r => r.id = 1).messages.data[0])\r\n\t\t\t\t// console.log('WebSocketHOC.jsx | ON MOUNT: 1.messages.data', chatsState.rooms.find(r => r.id = e.message.chat_id).messages.data)\r\n\t\t\t\t// console.log('websocket event', e, state.user_id !== e.senderId)\r\n\r\n\r\n\t\t\t\tsetNewMessage(e.message, e.chatId, state.user_id !== e.senderId)\r\n\r\n\t\t\t\t////// example websocket message\r\n\t\t\t\t// {\r\n\t\t\t\t// chat_id: 1\r\n\t\t\t\t// content: \"чё не отвечаешь?\"\r\n\t\t\t\t// created_at: \"2021-01-28T11:03:16.000000Z\"\r\n\t\t\t\t// id: 211\r\n\t\t\t\t// updated_at: \"2021-01-28T11:03:16.000000Z\"\r\n\t\t\t\t// user_id: 1\r\n\t\t\t\t// }\r\n\r\n\t\t\t})\r\n\t\t\t// .whisper('typing', {\r\n\t\t\t// \tchat_id: chatsState.activeChatId,\r\n\t\t\t// \tuser_id: state.user_id,\r\n\t\t\t// \tuser_name: state.name\r\n\t\t\t// })\r\n\t\t\t.listenForWhisper('typing', (e) => {\r\n\t\t\t\tsetTyping(e.chat_id, e.user_id, e.user_name)\r\n\t\t\t\t// console.log('whisper', e.chat_id, e.user_id, e.user_name);\r\n\t\t\t})\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.Echo.leave(`messenger`)\r\n\t\t\t// console.log('chat leaved')\r\n\t\t}\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{children}\r\n\t\t</>\r\n\t);\r\n})\r\n\r\nexport default WebSocketHOC;","D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\index.js",[],"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\main\\Main.jsx",["152","153"],"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\auth\\AuthHOC.jsx",["154","155","156","157"],"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\utils\\useLocalStorage.js",[],"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\components\\main\\registration\\RegistrationForm.jsx",[],"D:\\OSPanel\\domains\\slien\\react-web-chat\\src\\contexts\\ChatsProvider.jsx",[],{"ruleId":"158","severity":1,"message":"159","line":4,"column":8,"nodeType":"160","messageId":"161","endLine":4,"endColumn":14},{"ruleId":"162","severity":1,"message":"163","line":56,"column":13,"nodeType":"164","messageId":"165","endLine":56,"endColumn":28},{"ruleId":"166","severity":1,"message":"167","line":89,"column":47,"nodeType":"168","endLine":89,"endColumn":74},{"ruleId":"158","severity":1,"message":"169","line":3,"column":8,"nodeType":"160","messageId":"161","endLine":3,"endColumn":12},{"ruleId":"158","severity":1,"message":"170","line":5,"column":16,"nodeType":"160","messageId":"161","endLine":5,"endColumn":26},{"ruleId":"158","severity":1,"message":"171","line":6,"column":10,"nodeType":"160","messageId":"161","endLine":6,"endColumn":17},{"ruleId":"158","severity":1,"message":"172","line":6,"column":19,"nodeType":"160","messageId":"161","endLine":6,"endColumn":27},{"ruleId":"158","severity":1,"message":"173","line":8,"column":8,"nodeType":"160","messageId":"161","endLine":8,"endColumn":12},{"ruleId":"158","severity":1,"message":"174","line":2,"column":22,"nodeType":"160","messageId":"161","endLine":2,"endColumn":30},{"ruleId":"158","severity":1,"message":"175","line":2,"column":32,"nodeType":"160","messageId":"161","endLine":2,"endColumn":41},{"ruleId":"158","severity":1,"message":"176","line":2,"column":43,"nodeType":"160","messageId":"161","endLine":2,"endColumn":47},{"ruleId":"158","severity":1,"message":"177","line":2,"column":49,"nodeType":"160","messageId":"161","endLine":2,"endColumn":60},{"ruleId":"158","severity":1,"message":"178","line":4,"column":8,"nodeType":"160","messageId":"161","endLine":4,"endColumn":12},{"ruleId":"158","severity":1,"message":"172","line":5,"column":10,"nodeType":"160","messageId":"161","endLine":5,"endColumn":18},{"ruleId":"179","severity":1,"message":"180","line":42,"column":111,"nodeType":"181","messageId":"182","endLine":42,"endColumn":113},{"ruleId":"183","severity":1,"message":"184","line":71,"column":17,"nodeType":"185","endLine":71,"endColumn":38},{"ruleId":"158","severity":1,"message":"159","line":9,"column":8,"nodeType":"160","messageId":"161","endLine":9,"endColumn":14},{"ruleId":"166","severity":1,"message":"167","line":55,"column":22,"nodeType":"168","endLine":55,"endColumn":47},{"ruleId":"158","severity":1,"message":"186","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":26},{"ruleId":"158","severity":1,"message":"177","line":1,"column":28,"nodeType":"160","messageId":"161","endLine":1,"endColumn":39},{"ruleId":"158","severity":1,"message":"187","line":1,"column":41,"nodeType":"160","messageId":"161","endLine":1,"endColumn":51},{"ruleId":"158","severity":1,"message":"188","line":1,"column":53,"nodeType":"160","messageId":"161","endLine":1,"endColumn":60},{"ruleId":"158","severity":1,"message":"174","line":4,"column":10,"nodeType":"160","messageId":"161","endLine":4,"endColumn":18},{"ruleId":"158","severity":1,"message":"172","line":5,"column":10,"nodeType":"160","messageId":"161","endLine":5,"endColumn":18},{"ruleId":"158","severity":1,"message":"189","line":7,"column":10,"nodeType":"160","messageId":"161","endLine":7,"endColumn":22},{"ruleId":"158","severity":1,"message":"178","line":8,"column":8,"nodeType":"160","messageId":"161","endLine":8,"endColumn":12},{"ruleId":"158","severity":1,"message":"190","line":9,"column":10,"nodeType":"160","messageId":"161","endLine":9,"endColumn":22},{"ruleId":"191","severity":1,"message":"192","line":41,"column":8,"nodeType":"193","endLine":41,"endColumn":27,"suggestions":"194"},{"ruleId":"158","severity":1,"message":"187","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":27},{"ruleId":"158","severity":1,"message":"189","line":3,"column":10,"nodeType":"160","messageId":"161","endLine":3,"endColumn":22},{"ruleId":"179","severity":1,"message":"180","line":13,"column":57,"nodeType":"181","messageId":"182","endLine":13,"endColumn":59},{"ruleId":"179","severity":1,"message":"180","line":22,"column":57,"nodeType":"181","messageId":"182","endLine":22,"endColumn":59},{"ruleId":"158","severity":1,"message":"195","line":28,"column":15,"nodeType":"160","messageId":"161","endLine":28,"endColumn":21},{"ruleId":"158","severity":1,"message":"196","line":29,"column":15,"nodeType":"160","messageId":"161","endLine":29,"endColumn":23},{"ruleId":"179","severity":1,"message":"180","line":31,"column":53,"nodeType":"181","messageId":"182","endLine":31,"endColumn":55},{"ruleId":"158","severity":1,"message":"195","line":32,"column":15,"nodeType":"160","messageId":"161","endLine":32,"endColumn":21},{"ruleId":"158","severity":1,"message":"196","line":33,"column":15,"nodeType":"160","messageId":"161","endLine":33,"endColumn":23},{"ruleId":"166","severity":1,"message":"167","line":39,"column":17,"nodeType":"168","endLine":39,"endColumn":63},{"ruleId":"158","severity":1,"message":"197","line":21,"column":13,"nodeType":"160","messageId":"161","endLine":21,"endColumn":18},{"ruleId":"158","severity":1,"message":"198","line":21,"column":20,"nodeType":"160","messageId":"161","endLine":21,"endColumn":28},{"ruleId":"158","severity":1,"message":"199","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":25},{"ruleId":"158","severity":1,"message":"197","line":8,"column":12,"nodeType":"160","messageId":"161","endLine":8,"endColumn":17},{"ruleId":"158","severity":1,"message":"198","line":8,"column":19,"nodeType":"160","messageId":"161","endLine":8,"endColumn":27},{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"158","severity":1,"message":"187","line":1,"column":10,"nodeType":"160","messageId":"161","endLine":1,"endColumn":20},{"ruleId":"158","severity":1,"message":"189","line":3,"column":10,"nodeType":"160","messageId":"161","endLine":3,"endColumn":22},{"ruleId":"191","severity":1,"message":"204","line":73,"column":8,"nodeType":"193","endLine":73,"endColumn":10,"suggestions":"205"},{"ruleId":"166","severity":1,"message":"167","line":100,"column":39,"nodeType":"168","endLine":100,"endColumn":66},{"ruleId":"158","severity":1,"message":"206","line":197,"column":15,"nodeType":"160","messageId":"161","endLine":197,"endColumn":16},{"ruleId":"158","severity":1,"message":"207","line":11,"column":11,"nodeType":"160","messageId":"161","endLine":11,"endColumn":17},{"ruleId":"158","severity":1,"message":"177","line":3,"column":39,"nodeType":"160","messageId":"161","endLine":3,"endColumn":50},{"ruleId":"158","severity":1,"message":"208","line":10,"column":10,"nodeType":"160","messageId":"161","endLine":10,"endColumn":20},{"ruleId":"191","severity":1,"message":"209","line":67,"column":5,"nodeType":"193","endLine":67,"endColumn":7,"suggestions":"210"},{"ruleId":"158","severity":1,"message":"174","line":2,"column":40,"nodeType":"160","messageId":"161","endLine":2,"endColumn":48},{"ruleId":"158","severity":1,"message":"197","line":11,"column":10,"nodeType":"160","messageId":"161","endLine":11,"endColumn":15},{"ruleId":"158","severity":1,"message":"197","line":12,"column":12,"nodeType":"160","messageId":"161","endLine":12,"endColumn":17},{"ruleId":"158","severity":1,"message":"208","line":13,"column":12,"nodeType":"160","messageId":"161","endLine":13,"endColumn":22},{"ruleId":"179","severity":1,"message":"180","line":27,"column":34,"nodeType":"181","messageId":"182","endLine":27,"endColumn":36},{"ruleId":"191","severity":1,"message":"211","line":68,"column":5,"nodeType":"193","endLine":68,"endColumn":7,"suggestions":"212"},"no-unused-vars","'Loader' is defined but never used.","Identifier","unusedVar","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Room' is defined but never used.","'useHistory' is defined but never used.","'AuthAPI' is defined but never used.","'ChatsAPI' is defined but never used.","'Chat' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'memo' is defined but never used.","'useCallback' is defined but never used.","'Echo' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'createRef' is defined but never used.","'useContext' is defined but never used.","'useMemo' is defined but never used.","'StoreContext' is defined but never used.","'ChatsContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onScrollToTop'. Either include it or remove the dependency array.","ArrayExpression",["213"],"'avatar' is assigned a value but never used.","'roomName' is assigned a value but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'Children' is defined but never used.","no-native-reassign",["214"],"no-negated-in-lhs",["215"],"React Hook useEffect has a missing dependency: 'filterAddedUsers'. Either include it or remove the dependency array.",["216"],"'r' is assigned a value but never used.","'userId' is assigned a value but never used.","'chatsState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setNewMessage', 'setTyping', and 'state.user_id'. Either include them or remove the dependency array.",["217"],"React Hook useEffect has missing dependencies: 'setChatsData' and 'setState'. Either include them or remove the dependency array.",["218"],{"desc":"219","fix":"220"},"no-global-assign","no-unsafe-negation",{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},"Update the dependencies array to be: [messagesContainer, onScrollToTop]",{"range":"227","text":"228"},"Update the dependencies array to be: [filterAddedUsers]",{"range":"229","text":"230"},"Update the dependencies array to be: [setNewMessage, setTyping, state.user_id]",{"range":"231","text":"232"},"Update the dependencies array to be: [setChatsData, setState]",{"range":"233","text":"234"},[1204,1223],"[messagesContainer, onScrollToTop]",[2523,2525],"[filterAddedUsers]",[2323,2325],"[setNewMessage, setTyping, state.user_id]",[1779,1781],"[setChatsData, setState]"]